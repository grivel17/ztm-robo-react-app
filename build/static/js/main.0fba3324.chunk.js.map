{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","CardList","robots","cardComponent","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","target","value","state","fetch","then","resp","json","this","filterRobots","filter","robot","toLowerCase","includes","length","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"oNAiBeA,EAdF,SAACC,GAAW,IACdC,EAAmBD,EAAnBC,KAAMC,EAAaF,EAAbE,MAAOC,EAAMH,EAANG,GACpB,OAEI,sBAAKC,UAAU,qDAAf,UACI,qBAAKC,IAAK,QAAQC,IAAG,+BAA0BH,EAA1B,cACrB,gCACI,6BAAKF,IACL,4BAAIC,WCSLK,EAjBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAETC,EAAgBD,EAAOE,KAAI,SAACC,EAAMC,GACpC,OAAO,cAAC,EAAD,CACPT,GAAIK,EAAOI,GAAGT,GACdF,KAAQO,EAAOI,GAAGX,KAClBC,MAAOM,EAAOI,GAAGV,OAHGU,MAMxB,OACI,mCACMH,KCECI,EAdG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,qBAAKX,UAAU,QAAf,SACI,uBACIA,UAAU,cACVY,KAAK,SACLC,YAAY,eACZC,SAAWH,OC0DZI,G,wDA/CX,aAAe,IAAD,8BACV,gBAoBJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACR,YAAaO,EAAME,OAAOC,SApBzC,EAAKC,MAAQ,CACTjB,OAAQ,GACRM,YAAa,IAJP,E,qDAUd,WAAoB,IAAD,OACfY,MAAM,8CACDC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAhB,GACF,EAAKW,SAAS,CAACd,OAAOG,S,oBAWlC,WAAS,IAAD,EAC4BmB,KAAKL,MAA7BjB,EADJ,EACIA,OAAQM,EADZ,EACYA,YAEViB,EAAevB,EAAOwB,QAAO,SAAAC,GAC/B,OAAOA,EAAMhC,KAAKiC,cAAcC,SAASrB,EAAYoB,kBAG1D,OAAQ1B,EAAO4B,OAEN,sBAAKhC,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,sBACA,cAAC,EAAD,CAAWW,aAAgBe,KAAKV,iBAG5B,cAAC,EAAD,CAAUZ,OAAUuB,OAPb,6C,GAjCbM,cCPHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OAEP,cAAC,EAAD,IACCC,SAASC,eAAe,SAM3BX,M","file":"static/js/main.0fba3324.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Card = (props) => {\n    const {name, email, id} = props;\n    return (\n         \n        <div className=\"tc bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img alt= 'robot' src={`https://robohash.org/${id}?100x100`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Card\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n    \n    const cardComponent = robots.map((user, i) => {\n        return <Card key = {i} \n        id={robots[i].id} \n        name = {robots[i].name} \n        email={robots[i].email} />\n    })\n    \n    return (\n        <>\n            { cardComponent }\n        </>\n    );\n\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n    return (\n        <div className='pa2 b'>\n            <input \n                className=\"pa2 bg-gold\"\n                type=\"search\" \n                placeholder=\"search robot\" \n                onChange={ searchChange }    \n                />\n        </div>\n    )\n}\n\n\nexport default SearchBox;","import React, {Component} from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport robots from '../robots';\nimport './App.css';\n\n\n//koncepcja \"stanu\" opis aktualny aplikacji \n//trzeba to opisać, eby to zrozumieć\n// poczytać o state construktor i set state \n\n//smart components with state + class \n//tę koncepcję ju widziałem => life cycle method\n// https://pl.reactjs.org/docs/getting-started.html\n// https://create-react-app.dev/doc/documentation-intro \n // https://pl.reactjs.org/docs/introducing-jsx.html \n\n//to jest pierwszy etap (z constructorem ) mounting\n\nclass App extends Component { \n    constructor (){\n        super();\n        this.state = {\n            robots: [],\n            searchfield: ''\n    }\n    }\n\n//ta metoda to drugi krok w cyklu  \n\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(resp => resp.json())\n            .then(user => {\n                this.setState({robots:user})            \n            }) \n    }\n\n\n    //tu się fajne dzieje event zmienia wartość elementu obiektu \n\n    onSearchChange = (event) => {\n        this.setState({searchfield: event.target.value})            \n    }\n\n    render(){\n        const { robots, searchfield } = this.state;\n\n        const filterRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase()) \n        }) \n\n       return !robots.length ? <h1>Loading</h1> : \n          (\n                <div className='tc'>\n                    <h1 className=\"f1\">Robo APP</h1>\n                    <SearchBox searchChange = {this.onSearchChange} />\n                    \n                   \n                        <CardList robots = {filterRobots}/>\n                \n                </div>\n    )}\n    }\n\n\n\nexport default App; ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render(\n\n  <App />\n  ,document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}